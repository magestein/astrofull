---
// Define la interfaz genérica
export interface TableProps<T> {
  data: T[];
}

// Obtén los props
const { data } = Astro.props as TableProps<Record<string, any>>;

// Función para truncar texto
function truncateText(text: string, length: number) {
  if (text.length <= length) {
    return text;
  }
  return text.substring(0, length) + "...";
}
---

<!-- Renderiza la tabla -->
<table class="min-w-full divide-y divide-gray-700">
  <thead class="bg-gray-800">
    <tr>
      <!-- Renderiza los encabezados dinámicamente -->
      {
        Object.keys(data[0] || {}).map((key) => (
          <th
            scope="col"
            class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider"
          >
            {key}
          </th>
        ))
      }
      <th
        scope="col"
        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider"
      >
        Actions
      </th>
    </tr>
  </thead>
  <tbody class="bg-gray-900 divide-y divide-gray-700">
    <!-- Renderiza las filas dinámicamente -->
    {
      data.map((item) => (
        <tr>
          {Object.entries(item).map(([key, value]) => (
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200">
              {typeof value === "string"
                ? truncateText(value, 30)
                : value.toString()}
            </td>
          ))}
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200">
            <div class="flex space-x-2">
              <a
                href={`/post/edit/${item.id}`}
                class="px-2 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600"
              >
                Edit
              </a>
              <button
                class="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                is:raw
                onclick="handleDelete()"
              >
                Delete
              </button>
            </div>
          </td>
        </tr>
      ))
    }
  </tbody>
</table>
